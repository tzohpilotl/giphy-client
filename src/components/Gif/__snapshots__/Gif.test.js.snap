// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Spinner component should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Gif
    gif={
      Object {
        "id": "jj2",
        "images": Object {
          "original": Object {
            "url": "http://thegifurl.com",
          },
        },
        "title": "My gif",
      }
    }
    id="jj2"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="favorite-icon"
        >
          <img
            alt="Heart"
            src="heart.png"
          />
        </div>,
        <img
          alt="My gif"
          src="http://thegifurl.com"
        />,
      ],
      "className": "image-section",
      "onClick": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <img
            alt="Heart"
            src="heart.png"
          />,
          "className": "favorite-icon",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "alt": "Heart",
            "src": "heart.png",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "alt": "My gif",
          "src": "http://thegifurl.com",
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="favorite-icon"
          >
            <img
              alt="Heart"
              src="heart.png"
            />
          </div>,
          <img
            alt="My gif"
            src="http://thegifurl.com"
          />,
        ],
        "className": "image-section",
        "onClick": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <img
              alt="Heart"
              src="heart.png"
            />,
            "className": "favorite-icon",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "Heart",
              "src": "heart.png",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "alt": "My gif",
            "src": "http://thegifurl.com",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
